import ~.iterMap;
import ~.weLiveLocal;
import ~.weLiveRemote;
import ~.playBoard;
import /.at.lang.futures;
import /.at.support.timer;

// Java libs
def Math := jlobby.java.lang.Math;

//DIRTY CONSTANTS
def rows := 6;
def cols := 4;

def peerDetectionTime := 5;

deftype Player;
deftype Board;

def makeWeLive(){
	object:{
		// Id of this player
		def Id := /.at.support.util.randomNumberBetween(0, 125);
		
		// All players discovered so far
		def players := iterMap.new();
		// Players currently online and playing
		def onlinePlayers := iterMap.new();
		// New/Reconnected Playres waiting to join
		def joinPlayers := iterMap.new();
		
		// Local playBoard
		def board := playBoard.new(rows, cols);
		
		// Local and remote interfaces
		def local := weLiveLocalInterface.new(self);
		def remote := weLiveRemoteInterface.new(self);
		
		// session
		def sessionId := -1; // to be initialized

		// Export/discover peers
		def goOnline() {
			export: remote as: Player;
			whenever: Player discovered: {|plyr|
				def remoteId;
				def sessionPlayers := [];
				when: plyr<-getId()@FutureMessage becomes: { |remoteid|
					remoteId := remoteid;
					players.put(remoteid, plyr);
					system.println("Newplayer Discovered -- " + remoteid);
					
					if: (sessionId == -1)then: { // we have to join/initialize a new game
						when: plyr<-getSessionId()@FutureMessage becomes: { |remotesessionid|
							if: (remoteSessionid != -1) then: {// Player has been playing before -> this is not a new game
								sessionPlayers := sessionPlayers + [[plyr, sessionId]]; // save plyr reference and sessionId
								}
							else: {};// new player (starting up a game discovered)
							};
						
						// Keep discovering Players for 'peerDetectionTime' seconds
						when: peerDetectionTime.seconds elapsed: {
							def discoveredPlayers := players.getValueTable();
							
							if: (discoveredPlayers.length <= 0) then: { // No Players discovered -- waiting for players
								system.println("FATAL -- no players (online/offline) found");
								// TODO: breakout and recall goOnline(); --> ASK Florian how to break out
								};
							if: (sessionPlayers.length <= 0) then:{ // Initialize new game
								// TODO: initialize new game
								// Timestamping, etc.
								};
							else: { // Join existing game
								// Find the highest sessionId
								def currentMax := -1;
								def currentMaxPlayer;
								sessionPlayers.map: {|plyr|
									if: (Math.max(currentMax, plyr.at(2)) == plyr.at(2)) then: {
										currentMax := plyr.at(2);
										currentMaxPlayer := plyr.at(1);
									};
								};
								// TODO: join game, most recent session id is in 'currentMax'
							};
						};
					};
					else: {
						// TODO: we are reconnected
						};
				};
			
			};
		};
		
		
		goOnline();
	};
};

network.online();
def weLiveCore := makeWeLive();
system.println("weLive started, myId:" + weLiveCore.Id);