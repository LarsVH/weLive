import ~.iterMap;
import ~.weLiveLocal;
import ~.weLiveRemote;
import ~.playBoard;
import ~.session;
import ~.peerElection;
import ~.misc;
import /.at.lang.futures exclude seconds,minutes,millisec;
import /.at.support.timer;

//DIRTY CONSTANTS
def rows := 6;
def cols := 4;
def playerDetectionTime := seconds(5);
def playerReconnectDetectionTime := seconds(1);
def sessionDurationMillis := seconds(5);
def sessionResumeMillis := seconds(10);
def leaderMarginTime := seconds(2);

deftype Player;
//deftype Board;

def makeWeLive(){
	object:{
		// Id of this player
		def ID := /.at.support.util.randomNumberBetween(0, 125); // TODO {IMEI, etc}
		// Current Leader
		def leader := nil;
		// Current Status
		def status := "init"; // {init, joining, inSession, inSessionPlay,...}

		// All players discovered so far
		def players := iterMap.new();
		// Players currently online and playing
		def onlinePlayers := iterMap.new();
		// Players currently 'in-game' (ONLY LEADER has this map. No longer leader -> make-empty/nil)!!
		def sessionPlayers := iterMap.new();
		// New/Reconnected Playres waiting to join
		def joinPlayers := iterMap.new(); 
		
		// Local playBoard
		def startBoard; // := playBoard.new(rows, cols);

		// Local and remote interfaces
		def local := weLiveLocalInterface.new(self);
		def remote := weLiveRemoteInterface.new(self);
		
		// session.init(sessionID, playBoard, plyrs, endTm)
		def currSession := session.new(-1, playBoard.new(rows,cols), iterMap.new(), nil);
		
		// Export/discover peers
		def goOnline() {
			export: remote as: Player;
			
			def leaderFound := false;
			def detectOtherPlayers(time){
				system.println("INFO -- Start detecting other players for " + time + "s");
				// GUI output: scanning for other Players
				when: time elapsed: {
					if: (onlinePlayers.length > 0) then:
					{// Get statusses of other players
						// get a snapshot of current online players
						def currOnlinePlayers := onlinePlayers.deepCopy();
						def statusRequests := group: currOnlinePlayers.map({|plyr| plyr<-getStatus()@FutureMessage});
						when: statusRequests becomes: { |statusses|
							system.println("INFO -- Statusrequests: " + statusRequests);
							def currpos := 1;
							if: (leader != nil) then: {leaderFound := true;}; // FIXME: dirty hack to prevent not detecting to be a leader yourself
							def nonInitFound := false;
							{|Q|
								// Check if a leader already exists
								statusses.each:{ |plyrstatus|
									if: (!leaderFound) then: {
										if: (plyrstatus != "init") then: {
											nonInitFound := true;
											def plyr := currOnlinePlayers.at(currpos);
											def plyrleaderID := plyr<-getLeader()@FutureMessage;
											when: plyrleaderID becomes: { |leaderID|
												system.println("DEBUG -- Got leader (" + leaderID + ")");
												if:(leaderID == nil) then: {
													// This player does not have a leader yet -> this is a joiner (because his status != init)
													// ignore
													}
												else: {
													// Check if we already discovered the leader
													if:(onlinePlayers.contains(leaderID)) then: {// we already discovered the leader
														def remLeader := players.get(leaderID);
														// Send joinrequest to discovered leader
														joinRequest(ID, remLeader, currSession);//we did not play a session before
														status := "joining";
														system.println("INFO -- JoinRequest sent to leader (" + leaderID + ")");
														leaderFound := true;
														leader := leaderID;
														//Q();
														}
													else: {
														if: (leaderID == ID) then:{// Other players have already elected me leader
															system.println("INFO -- Other players have already elected me (" + ID + ") to be leader");
															if: (!leaderFound) then:{
																leaderFound := true;
																leader := ID;
																onNewLeader(leaderID);
															};
														}
														else: {
															system.println("WARNING -- Leader (" + leaderID + ") not yet discovered");
														};
														// XXX: intussen waarschijnlijk wel al gevonden <<<<<<<<<<<<<<<
														};
												};
											}
											catch: { |e|
												system.println("EXCEPT -- getLeader -- " + e);
											};
										}
										else: {};
										currpos := currpos +1;
									} else: {};// leader found -> done;
									};
							}.escape();
							
							if:((!leaderFound).and:{nonInitFound}) then: {// No leader found, although a peer with status non-init has been found
								// Scan again (hopefully we find the leader next time)
								system.println("INFO -- no leader found, non-init found -> restart detection");
								detectOtherPlayers(playerDetectionTime);
							}
							else: {
								if:(!leaderFound) then:{
									system.println("INFO -- All players are init, no leader found -> we become leader");
									// If no leader is found yet and everyone is @init -> make yourself leader and request an Election
									leader := ID;
									status := "electing";
									broadcastRequestPeerElection(self, leader);
									remote.requestPeerElection(leader);
								}
								else:{// Leader found and join request sent -> ignore
									};
							};
						}
						catch: { |e|
							system.println("EXCEPT -- statusRequests -- " + e);
						};
					}
					else:{
						system.println("INFO -- No players detected yet: " + onlinePlayers.length() + "waiting for another one to request join");
					};
				};
			}; // end detectOtherPlayers

			detectOtherPlayers(playerDetectionTime);
			
			// DISCOVERY
			//-----------------------------------------------------------
			whenever: Player discovered: {|plyr|
				when: plyr<-getID()@FutureMessage becomes: { |remoteID|
					players.put(remoteID, plyr);
					onlinePlayers.put(remoteID, plyr);
					system.println("Newplayer Discovered -- " + remoteID);
					whenever: plyr disconnected: {
						playerDisconnected(remoteID, plyr);
					};
					whenever: plyr reconnected: {
						playerReconnected(remoteID, plyr);
					};
				};
			};
			// Disconnect/Reconnect Callbacks
			//-----------------------------------------------------------
			def playerDisconnected(plyrID, plyrRef) {
				system.println("WARNING -- Player (" + plyrID + ") disconnected");
				onlinePlayers.remove(plyrID);
				if: (currSession.players.contains(plyrID)) then: {currSession.players.remove(plyrID);};
				if: (sessionPlayers.contains(plyrID)) then: {sessionPlayers.remove(plyrID);};
				if: (joinPlayers.contains(plyrID)) then: {joinPlayers.remove(plyrID);};
				
				// Check if we are the one that went offline
				offlineCheck();
				
				// GUI: Player DISCONNECTED --> GRAY OUT CELLS
				};
			def offlineCheck(){
				if: (onlinePlayers.length <= 0) then: {
					onSelfOffline();
				};
			};
			def onSelfOffline(){
				system.println("INFO -- We (" + ID + ") are offline ");
				leader := nil;// invalidate leader
				status := "offline";
			
			};
			
			def playerReconnected(plyrID, plyrRef) {
				system.println("INFO -- Player (" + plyrID + ") reconnected");
				onlinePlayers.put(plyrID, plyrRef);
				if: (status == "offline") then: {
					system.println("INFO -- We (" + ID + ") are back online");
					onSelfOnline();
				};
				
				// TODO: neem de speler weer op in het spel
				// GUI: reactivate cells
				};
			def onSelfOnline() {
				status := "init";
				detectOtherPlayers(seconds(0));
				//detectOtherPlayers(playerReconnectDetectionTime);// TO CHECK
				};
		};
		goOnline();
		
		// Helpfunctions for onNewLeader()
		//---------------------------------------
		def startNewGame(stBoard, remotePlayers) {
			system.println("INFO -- (Leader) Starting game");
			def endTime := now() + sessionDurationMillis; // add 10 seconds for the endTime
			def remoteMePlayers := remotePlayers.deepCopy();
			remoteMePlayers.put(ID, remote);// (TO CHECK) reference to self (our own remote interface
			currSession := session.new(1, stBoard, remoteMePlayers, endTime);
			remotePlayers.map({|plyr|
				plyr<-startSession(currSession)@OneWay;});
			remote.startSession(currSession);// starting ourselves
			};
		// DEPRECATED
		def continueGame(stBoardn, players){ // When a leader has failed
			system.println("INFO -- (Leader) Continuing game");
			def endTime := now() + sessionResumeMillis;
			currSession := session.new(currSession.ID, stBoard, players, endTime);
			players.map({|plyr|
				plyr<-resumeSession(currSession)@OneWay;});
			remote.resumeSession(currSession);// resuming ourselves
			};
		
		
		// New leader
		//---------------------------------------
		def onNewLeader(newLeaderID){
			leader := newLeaderID;// !! Laat dit staan (enkel voor de leader dubbel)
			system.println("DEBUG -- onNewLeader. MyID:" + ID + "; leaderID: " + newLeaderID);
			
			// We are new Leader
			if: (leader == ID) then: {
				// We are new leader
				// Get all existing sesssionPlayers (< ken je nog niet als je net leader wordt);

				// Go through all onlineplayers and request their session objects
				// Get the one with the highest sessionID
				// deepCopy its' players into sessionPlayers (if exist in onlinePlayers)
				// merge and compute next cycle (based on the highesSessionID object) -> use sessionOver(session)
				def sessionRequests := group: onlinePlayers.map({|plyr|
					 plyr<- getSession()@FutureMessage;
				 });
				 when: sessionRequests becomes: {|sessions|
					 def highestSession := currSession;
					 sessions.each:{|session|
						 if:(session.ID > highestSession.ID) then:{
							 highestSession := session;
						 };
					 };
					def hsPlayers := highestSession.players;// hsPlayers == higest session players (iterMap)

					// TODO: check of de sessie al op zijn einde is (vergelijk op basis EndSessionTime)
					// SOLUTION: normaal gezien zou alles moeten werken aangezien elke actor op zichzelf sessionOver oproept (en dan test of hij al
					// dan niet (nog) leider kan zijn
					// AAN HET EINDE VAN ELKE SESSIE WORDT AUTOMATISCH AL GEVERIFIEERD OF ER GEEN NIEUWE LEIDER MOET ZIJN

					// We have been elected to be leader at the end of a 'normal' session
					if:(hsPlayers.length() > 0) then: {
						sessionPlayers := iterMap.new(); // make sure sessionPlayers is empty
						hsPlayers.mapkv({|kv|
							if:(onlinePlayers.contains(kv.at(1))) then:{
								sessionPlayers.put(kv.at(1), kv.at(2));
							}
							else: {system.println("WARNING -- newLeader -- a sessionuser went offline");};
							kv;});
						
						// XXX: moet nog steeds worden opgeroepen: session over lanceert een peer election 
						// hierdoor wordt deze functie (onNewLeader) opgeroepen) -> sessie moet nog altijd worden afgehandeld
						sessionOver(highestSession);
					}
					else: {
						//no sessionplayers exist yet (= no game exists yet)
						// => start new game with all onlinePlayers (clear joinmap)
						system.println("INFO -- No sessionPlayers yet -- starting new game");
						joinPlayers := iterMap.new();// clear joiners
						sessionPlayers := onlinePlayers.deepCopy(); 
						def startBoard := playBoard.new(rows, cols);
						startNewGame(startBoard, sessionPlayers);
					};
				 };
			}
			else: { // Someone else is new leader
				sessionPlayers := iterMap.new();// no leader -> do not keep track of sessionPlayers -> clear
				};
		};
		
		// End-of-Session callback
		def sessionOver(session){
			if: (status == "offline") then: {
				system.println("INFO -- End of Session -- We are offline -- Waiting for reconnection");
			}
			else: {
				status := "endOfSession";
				def highestID := ID;// start with yourself (in case the leader went offline)
				onlinePlayers.mapkv({|kv|
					if:(IDsmaller(highestID, kv.at(1))) then: {highestID := kv.at(1);};
					kv;});
				joinPlayers.mapkv({|kv|
					if:(IDsmaller(highestID, kv.at(1))) then: {highestID := kv.at(1);};
					kv;});
				if: (highestID != leader) then: {// leader cannot longer be leader
					sessionPlayers := iterMap.new();
					//broadcastRequestPeerElection(self, leader);
					system.println("DEBUG -- oldLeader (" + leader + ") cannot longer be leader: higherID (" + highestID + ") detected");
					remote.requestPeerElection(leader);//OK: enkel lokaal peer electen (aangezien alle actors dit doen -> geen nood om extra bericht rond te sturen)
					} 
				else: {
					if: (leader == ID) then: {
						when: leaderMarginTime elapsed: {// safety margin (prevent errors caused by connections delays)
							def sessionsFut := group: session.players.map({|plyr|
								plyr<-getSession()@FutureMessage;
							});
							when: sessionsFut becomes: {|sessions|
								system.println("INFO -- leader (" + ID + ") -- retrieved all sessionobjects, starting merge");
								def merged := [currSession.board];// start merging with our playboard // [mergedBoards, cellslost1, cellslost2]
								sessions.each:{|session|
									if: (session.ID < currSession.ID) then: {
										merged := merge(merged.at(1), session.board, false);
									}
									else: {
										merged := merge(merged.at(1), session.board);
										// cellsLost1 := merged.at(2);// not taken into account in this version of the game
										// cellsLost2 := merged.at(3);
										};
								};
								def mergedBoard := merged.at(1);
								// merge joiners in sessionPlayers
								joinPlayers.mapkv({ |kv|
									sessionPlayers.put(kv.at(1), kv.at(2));
									kv;// mapkv requires a return value
									});
								def sessionPlayersMe := sessionPlayers.deepCopy();
								sessionPlayersMe.put(ID, remote); // send yourself together with the sessionobject
								def nextSession := session.new((session.ID + 1), computeNextGen(mergedBoard), sessionPlayersMe, (now() + sessionDurationMillis));
								sessionPlayers.map({|plyr| plyr<-startSession(nextSession)@OneWay;});
								remote.startSession(nextSession);
							};
							// merge playboards
							// include joiners
							// make new session object (id + 1)
							// start new session

						};
					}
					// Leaderwill retrieve our sessionobject
					// Wait for next session to start
					else:{// GUI: wait for next session
						joinPlayers := iterMap.new();// clear all joiners for this session
						}; 
				};
			};
		};
	};
};
// 
def broadcastRequestPeerElection(game, oldLeader, oldLeaderOffline := false){
	// Helpfunction
	def doBroadcast(){
		game.onlinePlayers.map({|plyr|
		plyr<-requestPeerElection(oldLeader)@OneWay
		});
	};
	// I was previousleader
	if: (oldLeader == game.ID) then: {
		doBroadcast();
	}
	else: {
		// XXX: DEPRECATED: IF case does not occur anymore (we only do local peerElection)
		if: (oldLeaderOffline) then: {// Leader went offline -> new leader needed
			// check if a new leader has been elected yet (in the meantime)
			// dirty hack to improve performance
			def waittm := millisec(/.at.support.util.randomNumberBetween(0, 1000));
			when: waittm elapsed: {
				if:(game.leader == oldLeader) then: {
					// Still no new leader chosen -> send requests;
					doBroadcast();
				};
				else: {}; // A new leader has already been chosen, ignore
				};
		}
		else: {
			system.println("WARNING-- Can't request peer election if self != leader");
		};
	};
};

def joinRequest(myID, leaderRef, session) {
	leaderRef<-requestJoin(myID, session)@FutureMessage;
};

network.online();
def weLiveCore := makeWeLive();
system.println("weLive started, myId:" + weLiveCore.ID);