// Keeping a hashmap and an AmbientTalk table consistent
// Aim: Avoiding to iterate over a Java Hashmap while keeping its advantages
object:{
	def iterMap := object: {
		def hashMap;
		def table;
		
		def init(){
			hashMap := jlobby.java.util.HashMap.new();
			table := [];
		};		
		def contains(key) {
			hashMap.containsKey(key);
		};		
		def get(key) {
			hashMap.get(key);
		};		
		def put(key,value){
			if: (hashMap.get(key) == nil) then:{
				hashMap.put(key,value);
				table := table + [value];
				value;
			}
			else: {// Key is already in iterMap, ignore
				false;
			};
		};		
		def remove(key){
			def value := hashMap.remove(key);
			table := table.filter:{|e| e != value};
			value;
		};
		def getHashMap(){
			hashMap;
		};		
		def getValueTable(){
			table;
		};
		// Map a clojure taking 1 argument over the value table
		def map(clojure) {
			table.map: clojure;
		};
		// Map a clojure (taking/returning a table of length 2 over the key value pairs
		// Result is a new hashmap
		def mapkv(clojure) {
			def iter := hashMap.entrySet().iterator();
			def res := jlobby.java.util.HashMap.new();
			while:{iter.hasNext()} do: {
				def kvpair := iter.next();
				def [key, value] := clojure([kvpair.getKey(), kvpair.getValue()]);
				res.put(key, value);				
			};
			res;
		};
		def at(idx) {
			table.at(idx);
		};
		def length() {
			table.length();
		};		
		def getKeys(){// Returns an AT table of all keys
			def iter := hashMap.keySet().iterator();
			def res := [];
			while: {iter.hasNext()} do: {
				res := res + [iter.next()];
			};
			//iter.remove();
			res;
		};
		// Returns a deepcopy of the iterMap
		// !WARNING -- all elements should be native datatypes -- WARNING!
		def deepCopy(){
			def res := self.new();
			res.hashMap := self.mapkv({|p| p});
			res.table := table;
			res;
		};
		def test(){
			def a := self.new();
			a.put(1, "a");
			a.put(2, "b");
			a.put(63, "c");
			a;
		};
	};
};
