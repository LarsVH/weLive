import ~.peerElection;
import ~.misc;
import /.at.lang.futures exclude seconds,minutes,millisec;
import /.at.support.timer;

object:{
	def weLiveRemoteInterface := object: {
		
		def parent;
		def init(prnt) {
			parent := prnt;
		};
		def getID(){
			parent.ID;
		};		
		def getStartPlayBoard(){
			parent.startBoard;
		};
		def getSessionID(){
			parent.currSession.ID;
		};
		def getSession(){
			system.println("DEBUG -- SessionRequest");
			parent.currSession;
		};
		def getStatus(){
			parent.status;
		};
		def getLeader(){
			parent.leader;
		};
		def requestJoin(joinID, session){
			// TODO: Check of request niet van jezelf
			if: (parent.leader == parent.ID) then: {
				system.println("INFO -- New Joiner -- joinID: " + joinID + " -- session:" + session);
				def joiner := parent.onlinePlayers.get(joinID);
				if: (parent.sessionPlayers.contains(joinID)) then: {
					system.println("WARNING -- joiner (" + joinID + ") already in-game");
					// our joiner is already in the game
					// this case can happen when init code is not finished when game already started
				}
				else: {
				parent.joinPlayers.put(joinID, joiner);
				};
				true; 
				}
			else: {
				system.println("ERROR -- RemoteFacade -- " + joinID + " wants to join, while me not leader");
				false;
				};
		};
		def requestLeaderShip(remoteID){
			if: (IDsmaller(remoteID, parent.ID)) then: {
				system.println("WARNING -- requestLeaderShip -- remoteID (" + remoteID + ") smaller than MyID (" + parent.ID + ")");
			}
			else: {
				system.println("INFO -- INBOUND requestLeaderShip -- new Leader: " + remoteID);
			};
			parent.onNewLeader(remoteID);
		};
		def requestPeerElection(remoteLeader) {
			system.println("INFO -- Peer Election requested by: " + remoteLeader);
			parent.status := "electing";
			def snapOnlinePlayers := parent.onlinePlayers.deepCopy();
			def newLeader := peerElection(parent, snapOnlinePlayers);
			parent.leader := newLeader;		// We are now the new leader
			if: (newLeader == parent.ID) then:{	
				system.println("INFO -- I (" + parent.ID + ") am new leader, broadcasting leadershiprequests");
				snapOnlinePlayers.map({|plyr|
					plyr<-requestLeaderShip(parent.ID)@OneWay // no return value required
					});
				parent.onNewLeader(newLeader);
			}
			else:{
				system.println("INFO -- We (" + parent.ID + ") do not become leader; new Leader is: " + newLeader);
			};
			
		};
		def startSession(session){
			system.println("INFO -- INBOUND -- StartSession, sessionID:" + session.ID);
			parent.status := "inSession";
			parent.currSession := session;
			// TODO: GUI: StartSession	(session) <- moves moeten op spelbord van session object worden gedaan
			// currSession <- aanpassen bij elke move
			
			
			def duration := (session.endTime - now());
			when: duration elapsed: {
			// TODO: GUI: StopSession (geen moves meer toegelaten)
			system.println("INFO -- Session over");
			parent.sessionOver(session);
			};
			
		};
		def resumeSession(session){
			// TODO

			// TODO: GUI: ResumeSession
		};
	};
};