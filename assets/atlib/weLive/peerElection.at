import ~.misc;

object:{
	// Returns ID of new leader;
	def peerElection(game, snapOnlinePlayers){
		system.println("INFO -- Peer election init");
		def myID := game.ID;
		if: (game.status != "init") then: {
			def playerIDs := snapOnlinePlayers.getKeys();// get all playerIDs from snapOnlinePlayers
			def highestID := myID;
			{|break|
				// Loop over all IDs to check whether our ID is highest
				playerIDs.each:{|remPlyrID|
					if:(IDsmaller(highestID, remPlyrID)) then: {
						// No possibility to become leader
						system.println("INFO -- myID (" + myID + ") < RemoteID (" + remPlyrID + ") -> cannot become leader");
						highestID := remPlyrID;
					}
					else: { // Still making chance to become leader
						};
				};
			}.escape();			
			if: (snapOnlinePlayers.getValueTable() == game.onlinePlayers.getValueTable()) then:{
				if: (highestID == myID) then: {
					system.println("INFO -- MyID (" + myID + ") is highest");
				}
				else:{
					// wait for another peer to claim leadership
					};
				highestID;
			}
			else:{
				system.println("WARNING -- onlinePlayers map has changed, restarting peer election");
				peerElection(game, game.onlinePlayers.deepCopy());
			};
		}
		else: {
			system.println("ERROR -- peerElection: Can't elect peers while gamestatus == init");
		};
	};
}